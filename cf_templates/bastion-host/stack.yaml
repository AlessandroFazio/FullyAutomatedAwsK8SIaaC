AWSTemplateFormatVersion: '2010-09-09'  
Description: |
  This stack is used for creating the following Resources:
  1. Bastion Host Key Pair
  2. Bastion Host Security Group
  3. Bastion Host Launch Template
  4. Bastion Host Placement Group
  5. Bastion Host Auto Scaling Group

Parameters:
  ProjectName:
    Type: String
    Description: Name of the project
  
  EnvironmentName:
    Type: String
    Description: An environment name that will be prefixed to resource names

  StackName:
    Type: String
    Description: Name of the stack
  
  S3BucketName:
    Type: String
    Description: Name of the S3 bucket where the public key will be stored

  VpcId:
    Type: String
    Description: Please select the VPC where the bastion host will be deployed
  
  VpcCIDR:
    Type: String
    Description: Please enter the IP range (CIDR notation) for this VPC
  
  PublicSubnet1Id:
    Type: AWS::EC2::Subnet::Id
    Description: Please select the public subnet where the bastion host will be deployed

  HomeInternetRouterIp:
    Type: String
    Description: Please enter the IP address of your home internet router

  BastionHostInstanceType:
    Description: Please enter Bastion Host Instance Type
    Type: String

  BastionHostRootVolumeSize:
    Description: Please enter Bastion Host Root Volume Size
    Type: Number

Resources:

  BastionHostS3BucketAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: BastionHostS3BucketAccessPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:DescribeBucket"
            Resource:
              - Fn::Sub: "arn:aws:s3:::${S3BucketName}/ssh/*"
      Roles:
        - !Ref BastionHostInstanceIAMRole
  
  BastionHostInstanceIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: BastionHostInstanceIAMRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Tags:
        - Key: Name
          Value: BastionHostInstanceIAMRole
  
  BastionHostInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: BastionHostInstanceProfile
      Roles:
        - !Ref BastionHostInstanceIAMRole
  
  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: BastionHostSecurityGroup
      GroupDescription: Bastion Host Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref HomeInternetRouterIp
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref VpcCIDR
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCIDR
  
  BastionHostLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: BastionHostLaunchTemplate
      LaunchTemplateData:
        ImageId: ami-0df435f331839b2d6
        InstanceType: !Ref BastionHostInstanceType
        SecurityGroupIds:
          - !Ref BastionHostSecurityGroup
        IamInstanceProfile:
          Arn: !GetAtt BastionHostInstanceProfile.Arn
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: !Ref BastionHostRootVolumeSize
              VolumeType: gp3 # Choose an appropriate volume type (e.g., gp2, io1)
              DeleteOnTermination: true
        Monitoring:
          Enabled: true
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName} Bastion Host Instance
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash

            exec > >(tee /var/log/user-data-stdout.log) 2> >(tee /var/log/user-data-stderr.log >&2)
            yum update -y 

            # install aws cli
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install

            # Download the public key from S3
            aws s3 cp s3://${S3BucketName}/ssh/client-key.pub /tmp/client-key.pub

            # Add the key to authorized_keys
            cat /tmp/client-key.pub >> /home/ec2-user/.ssh/authorized_keys

            # Ensure the correct permissions
            chown ec2-user:ec2-user /home/ec2-user/.ssh/authorized_keys
            chmod 600 /home/ec2-user/.ssh/authorized_keys

            # Allow AgentForwarding on SSH server
            sed -i 's/#AllowAgentForwarding yes/AllowAgentForwarding yes/' /etc/ssh/sshd_config
            systemctl restart ssh

  BastionHostAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: BastionHostAutoScalingGroup
      LaunchTemplate:
        LaunchTemplateId: !Ref BastionHostLaunchTemplate
        Version: !GetAtt BastionHostLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      VPCZoneIdentifier:
        - !Ref PublicSubnet1Id
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion Host Instance
          PropagateAtLaunch: true

Outputs:
  BastionHostSecurityGroupId:
    Description: Security Group ID of the bastion host
    Value: !GetAtt BastionHostSecurityGroup.GroupId

  BastionHostAutoScalingGroup:
    Description: Auto Scaling Group of the bastion host
    Value: !Ref BastionHostAutoScalingGroup

