AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  ProjectName:
    Type: String
    Description: Name of the project

  EnvironmentName:
    Type: String
    Description: An environment name that will be prefixed to resource names

  StackName:
    Type: String
    Description: Name of the stack
  
  OidcProviderUrl:
    Type: String
    Description: Please enter the OidcProviderUrl
  
  EbsCsiDriverSaNamespace:
    Type: String
    Description: Please enter the EbsCsiDriverSaNamespace
  
  AwsCloudProviderSaNamespace:
    Type: String
    Description: Please enter the AwsCloudProviderSaNamespace
  
  AwsLoadBalancerControllerSaNamespace:
    Type: String
    Description: Please enter the AwsLoadBalancerControllerSaNamespace
  
  ClusterAutoScalerSaNamespace:
    Type: String
    Description: Please enter the ClusterAutoScalerSaNamespace
  
  NodeTerminationHandlerSaNamespace:
    Type: String
    Description: Please enter the NodeTerminationHandlerSaNamespace


Resources:

  OIDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: !Ref OidcProviderUrl # TODO: handle OIDC Provider correctly
      ClientIDList:
        - sts.amazonaws.com

  EbsCsiDriverIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AwsLoadBalancerControllerIAMRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Sub "arn:aws:iam::${AWS::AccountId}:oidc-provider/${OidcProviderUrl}"
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                !Sub "${OidcProviderUrl}:aud": "sts.amazonaws.com"
                !Sub "${OidcProviderUrl}:sub": "system:serviceaccount:${EbsCsiDriverSaNamespace}:ebs-csi-controller"
      Path: /
      Policies:
        - !Ref EbsCsiDriverPolicy

  AwsEbsCsiDriverPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AwsEbsCsiDriverPolicy
      Roles:
        - !Ref ControlPlaneInstanceIAMRole
        - !Ref WorkerInstanceIAMRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ec2:CreateSnapshot
              - ec2:AttachVolume
              - ec2:DetachVolume
              - ec2:ModifyVolume
              - ec2:DescribeAvailabilityZones
              - ec2:DescribeInstances
              - ec2:DescribeSnapshots
              - ec2:DescribeTags
              - ec2:DescribeVolumes
              - ec2:DescribeVolumesModifications
            Resource: "*"
          - Effect: Allow
            Action:
              - ec2:CreateTags
            Resource:
              - "arn:aws:ec2:*:*:volume/*"
              - "arn:aws:ec2:*:*:snapshot/*"
            Condition:
              StringEquals:
                "ec2:CreateAction":
                  - "CreateVolume"
                  - "CreateSnapshot"
          - Effect: Allow
            Action:
              - ec2:DeleteTags
            Resource:
              - "arn:aws:ec2:*:*:volume/*"
              - "arn:aws:ec2:*:*:snapshot/*"
          - Effect: Allow
            Action:
              - ec2:CreateVolume
            Resource: "*"
            Condition:
              StringLike:
                "aws:RequestTag/ebs.csi.aws.com/cluster": "true"
          - Effect: Allow
            Action:
              - ec2:CreateVolume
            Resource: "*"
            Condition:
              StringLike:
                "aws:RequestTag/CSIVolumeName": "*"
          - Effect: Allow
            Action:
              - ec2:DeleteVolume
            Resource: "*"
            Condition:
              StringLike:
                "ec2:ResourceTag/ebs.csi.aws.com/cluster": "true"
          - Effect: Allow
            Action:
              - ec2:DeleteVolume
            Resource: "*"
            Condition:
              StringLike:
                "ec2:ResourceTag/CSIVolumeName": "*"
          - Effect: Allow
            Action:
              - ec2:DeleteVolume
            Resource: "*"
            Condition:
              StringLike:
                "ec2:ResourceTag/kubernetes.io/created-for/pvc/name": "*"
          - Effect: Allow
            Action:
              - ec2:DeleteSnapshot
            Resource: "*"
            Condition:
              StringLike:
                "ec2:ResourceTag/CSIVolumeSnapshotName": "*"
          - Effect: Allow
            Action:
              - ec2:DeleteSnapshot
            Resource: "*"
            Condition:
              StringLike:
                "ec2:ResourceTag/ebs.csi.aws.com/cluster": "true"
          - Effect: Allow
            Action: 
              - kms:Decrypt
              - kms:GenerateDataKeyWithoutPlaintext
              - kms:CreateGrant
            Resource": "*"

  AwsCloudProviderIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AwsLoadBalancerControllerIAMRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Sub "arn:aws:iam::${AWS::AccountId}:oidc-provider/${OidcProviderUrl}"
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                !Sub "${OidcProviderUrl}:aud": "sts.amazonaws.com"
                !Sub "${OidcProviderUrl}:sub": "system:serviceaccount:${AwsCloudProviderSaNamespace}:aws-cloud-provider"
      Path: /
      Policies:
        - !Ref AwsCloudProviderPolicy

  AwsCloudProviderPolicy:                # TODO: ebs.csi.aws.com/agent-not-ready:NoExecute is a taint for avoiding race conditions when scaling node groups which should run pods with EBS volumes. 
    Type: AWS::IAM::Policy               # TODO: This taint is added by the EBS CSI driver when it is not ready to serve volume attachment requests. 
    Properties:                          # TODO: The taint is removed when the driver is ready to serve volume attachment requests.
      PolicyName: AwsCloudProviderPolicy # TODO: Deal with this taint in the cluster-autoscaler.
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:DescribeLaunchConfigurations
              - autoscaling:DescribeTags
              - ec2:DescribeInstances
              - ec2:DescribeRegions
              - ec2:DescribeRouteTables
              - ec2:DescribeSecurityGroups
              - ec2:DescribeSubnets
              - ec2:DescribeVolumes
              - ec2:DescribeAvailabilityZones
              - ec2:CreateSecurityGroup
              - ec2:CreateTags
              - ec2:CreateVolume
              - ec2:ModifyInstanceAttribute
              - ec2:ModifyVolume
              - ec2:AttachVolume
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:CreateRoute
              - ec2:DeleteRoute
              - ec2:DeleteSecurityGroup
              - ec2:DeleteVolume
              - ec2:DetachVolume
              - ec2:RevokeSecurityGroupIngress
              - ec2:DescribeVpcs
              - elasticloadbalancing:AddTags
              - elasticloadbalancing:AttachLoadBalancerToSubnets
              - elasticloadbalancing:ApplySecurityGroupsToLoadBalancer
              - elasticloadbalancing:CreateLoadBalancer
              - elasticloadbalancing:CreateLoadBalancerPolicy
              - elasticloadbalancing:CreateLoadBalancerListeners
              - elasticloadbalancing:ConfigureHealthCheck
              - elasticloadbalancing:DeleteLoadBalancer
              - elasticloadbalancing:DeleteLoadBalancerListeners
              - elasticloadbalancing:DescribeLoadBalancers
              - elasticloadbalancing:DescribeLoadBalancerAttributes
              - elasticloadbalancing:DetachLoadBalancerFromSubnets
              - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
              - elasticloadbalancing:ModifyLoadBalancerAttributes
              - elasticloadbalancing:RegisterInstancesWithLoadBalancer
              - elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer
              - elasticloadbalancing:AddTags
              - elasticloadbalancing:CreateListener
              - elasticloadbalancing:CreateTargetGroup
              - elasticloadbalancing:DeleteListener
              - elasticloadbalancing:DeleteTargetGroup
              - elasticloadbalancing:DescribeListeners
              - elasticloadbalancing:DescribeLoadBalancerPolicies
              - elasticloadbalancing:DescribeTargetGroups
              - elasticloadbalancing:DescribeTargetHealth
              - elasticloadbalancing:ModifyListener
              - elasticloadbalancing:ModifyTargetGroup
              - elasticloadbalancing:RegisterTargets
              - elasticloadbalancing:DeregisterTargets
              - elasticloadbalancing:SetLoadBalancerPoliciesOfListener
              - iam:CreateServiceLinkedRole
              - kms:DescribeKey
            Resource:
              - "*"
  
  AwsLoadBalancerControllerIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AwsLoadBalancerControllerIAMRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Sub "arn:aws:iam::${AWS::AccountId}:oidc-provider/${OidcProviderUrl}"
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                !Sub "${OidcProviderUrl}:aud": "sts.amazonaws.com"
                !Sub "${OidcProviderUrl}:sub": "system:serviceaccount:${AwsLoadBalancerControllerSaNamespace}:aws-load-balancer-controller"
      Path: /
      Policies:
        - !Ref AwsLoadBalancerControllerPolicy

  AwsLoadBalancerControllerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AwsLoadBalancerControllerPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - iam:CreateServiceLinkedRole
          Resource: "*"
          Condition:
            StringEquals:
              iam:AWSServiceName: elasticloadbalancing.amazonaws.com
        - Effect: Allow
          Action:
          - ec2:DescribeRegions
          - ecr:GetAuthorizationToken
          - ecr:BatchCheckLayerAvailability
          - ecr:GetDownloadUrlForLayer
          - ecr:GetRepositoryPolicy
          - ecr:DescribeRepositories
          - ecr:ListImages
          - ecr:BatchGetImage
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAddresses
          - ec2:DescribeAvailabilityZones
          - ec2:DescribeInternetGateways
          - ec2:DescribeVpcs
          - ec2:DescribeVpcPeeringConnections
          - ec2:DescribeSubnets
          - ec2:DescribeSecurityGroups
          - ec2:DescribeInstances
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeTags
          - ec2:GetCoipPoolUsage
          - ec2:DescribeCoipPools
          - elasticloadbalancing:DescribeLoadBalancers
          - elasticloadbalancing:DescribeLoadBalancerAttributes
          - elasticloadbalancing:DescribeListeners
          - elasticloadbalancing:DescribeListenerCertificates
          - elasticloadbalancing:DescribeSSLPolicies
          - elasticloadbalancing:DescribeRules
          - elasticloadbalancing:DescribeTargetGroups
          - elasticloadbalancing:DescribeTargetGroupAttributes
          - elasticloadbalancing:DescribeTargetHealth
          - elasticloadbalancing:DescribeTags
          Resource: "*"
        - Effect: Allow
          Action:
          - cognito-idp:DescribeUserPoolClient
          - acm:ListCertificates
          - acm:DescribeCertificate
          - iam:ListServerCertificates
          - iam:GetServerCertificate
          - waf-regional:GetWebACL
          - waf-regional:GetWebACLForResource
          - waf-regional:AssociateWebACL
          - waf-regional:DisassociateWebACL
          - wafv2:GetWebACL
          - wafv2:GetWebACLForResource
          - wafv2:AssociateWebACL
          - wafv2:DisassociateWebACL
          - shield:GetSubscriptionState
          - shield:DescribeProtection
          - shield:CreateProtection
          - shield:DeleteProtection
          Resource: "*"
        - Effect: Allow
          Action:
          - ec2:AuthorizeSecurityGroupIngress
          - ec2:RevokeSecurityGroupIngress
          Resource: "*"
        - Effect: Allow
          Action:
          - ec2:CreateSecurityGroup
          Resource: "*"
        - Effect: Allow
          Action:
          - ec2:CreateTags
          Resource: arn:aws:ec2:*:*:security-group/*
          Condition:
            StringEquals:
              ec2:CreateAction: CreateSecurityGroup
            'Null':
              aws:RequestTag/elbv2.k8s.aws/cluster: 'false'
        - Effect: Allow
          Action:
          - ec2:CreateTags
          - ec2:DeleteTags
          Resource: arn:aws:ec2:*:*:security-group/*
          Condition:
            'Null':
              aws:RequestTag/elbv2.k8s.aws/cluster: 'true'
              aws:ResourceTag/elbv2.k8s.aws/cluster: 'false'
        - Effect: Allow
          Action:
          - ec2:AuthorizeSecurityGroupIngress
          - ec2:RevokeSecurityGroupIngress
          - ec2:DeleteSecurityGroup
          Resource: "*"
          Condition:
            'Null':
              aws:ResourceTag/elbv2.k8s.aws/cluster: 'false'
        - Effect: Allow
          Action:
          - elasticloadbalancing:CreateLoadBalancer
          - elasticloadbalancing:CreateTargetGroup
          Resource: "*"
          Condition:
            'Null':
              aws:RequestTag/elbv2.k8s.aws/cluster: 'false'
        - Effect: Allow
          Action:
          - elasticloadbalancing:CreateListener
          - elasticloadbalancing:DeleteListener
          - elasticloadbalancing:CreateRule
          - elasticloadbalancing:DeleteRule
          Resource: "*"
        - Effect: Allow
          Action:
          - elasticloadbalancing:AddTags
          - elasticloadbalancing:RemoveTags
          Resource:
          - arn:aws:elasticloadbalancing:*:*:targetgroup/*/*
          - arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*
          - arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*
          Condition:
            'Null':
              aws:RequestTag/elbv2.k8s.aws/cluster: 'true'
              aws:ResourceTag/elbv2.k8s.aws/cluster: 'false'
        - Effect: Allow
          Action:
          - elasticloadbalancing:AddTags
          - elasticloadbalancing:RemoveTags
          Resource:
          - arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*
          - arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*
          - arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*
          - arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*
        - Effect: Allow
          Action:
          - elasticloadbalancing:ModifyLoadBalancerAttributes
          - elasticloadbalancing:SetIpAddressType
          - elasticloadbalancing:SetSecurityGroups
          - elasticloadbalancing:SetSubnets
          - elasticloadbalancing:DeleteLoadBalancer
          - elasticloadbalancing:ModifyTargetGroup
          - elasticloadbalancing:ModifyTargetGroupAttributes
          - elasticloadbalancing:DeleteTargetGroup
          Resource: "*"
          Condition:
            'Null':
              aws:ResourceTag/elbv2.k8s.aws/cluster: 'false'
        - Effect: Allow
          Action:
          - elasticloadbalancing:AddTags
          Resource:
          - arn:aws:elasticloadbalancing:*:*:targetgroup/*/*
          - arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*
          - arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*
          Condition:
            StringEquals:
              elasticloadbalancing:CreateAction:
              - CreateTargetGroup
              - CreateLoadBalancer
            'Null':
              aws:RequestTag/elbv2.k8s.aws/cluster: 'false'
        - Effect: Allow
          Action:
          - elasticloadbalancing:RegisterTargets
          - elasticloadbalancing:DeregisterTargets
          Resource: arn:aws:elasticloadbalancing:*:*:targetgroup/*/*
        - Effect: Allow
          Action:
          - elasticloadbalancing:SetWebAcl
          - elasticloadbalancing:ModifyListener
          - elasticloadbalancing:AddListenerCertificates
          - elasticloadbalancing:RemoveListenerCertificates
          - elasticloadbalancing:ModifyRule
          Resource: "*"

  ClusterAutoScalerIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ClusterAutoScalerIAMRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Sub "arn:aws:iam::${AWS::AccountId}:oidc-provider/${OidcProviderUrl}"
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                !Sub "${OidcProviderUrl}:aud": "sts.amazonaws.com"
                !Sub "${OidcProviderUrl}:sub": "system:serviceaccount:${ClusterAutoScalerSaNamespace}:cluster-autoscaler"
      Path: /
      Policies:
        - !Ref ClusterAutoScalerPolicy

  ClusterAutoScalerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ClusterAutoScalingPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:DescribeAutoScalingInstances
              - autoscaling:DescribeLaunchConfigurations
              - autoscaling:DescribeScalingActivities
              - autoscaling:DescribeTags
              - ec2:DescribeInstanceTypes
              - ec2:DescribeLaunchTemplateVersions
            Resource: "*"
          - Effect: Allow
            Action:
              - autoscaling:SetDesiredCapacity
              - autoscaling:TerminateInstanceInAutoScalingGroup
              - ec2:DescribeImages
              - ec2:GetInstanceTypesFromInstanceRequirements
              - eks:DescribeNodegroup
            Resource: "*"
  
  NodeTerminationHandlerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: MyLifecycleHookPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - autoscaling:CompleteLifecycleAction
              - autoscaling:DescribeAutoScalingInstances
              - autoscaling:DescribeTags
              - ec2:DescribeInstances
              - sqs:DeleteMessage
              - sqs:ReceiveMessage
            Resource: "*"
  
  NodeTerminationHandlerIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: NodeTerminationHandlerIAMRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Sub "arn:aws:iam::${AWS::AccountId}:oidc-provider/${OidcProviderUrl}"
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                !Sub "${OidcProviderUrl}:aud": "sts.amazonaws.com"
                !Sub "${OidcProviderUrl}:sub": "system:serviceaccount:${NodeTerminationHandlerSaNamespace}:aws-node-termination-handler"
      Path: /
      Policies:
        - !Ref NodeTerminationHandlerPolicy

Outputs:
  EbsCsiDriverIAMRoleArn:
    Description: EbsCsiDriverIAMRoleArn
    Value: !GetAtt EbsCsiDriverIAMRole.Arn

  AwsCloudProviderIAMRoleArn:
    Description: AwsCloudProviderIAMRoleArn
    Value: !GetAtt AwsCloudProviderIAMRole.Arn

  AwsLoadBalancerControllerIAMRoleArn:
    Description: AwsLoadBalancerControllerIAMRoleArn
    Value: !GetAtt AwsLoadBalancerControllerIAMRole.Arn

  ClusterAutoScalerIAMRoleArn:
    Description: ClusterAutoScalerIAMRoleArn
    Value: !GetAtt ClusterAutoScalerIAMRole.Arn
  
  NodeTerminationHandlerIAMRoleArn:
    Description: NodeTerminationHandlerIAMRoleArn
    Value: !GetAtt NodeTerminationHandlerIAMRole.Arn

