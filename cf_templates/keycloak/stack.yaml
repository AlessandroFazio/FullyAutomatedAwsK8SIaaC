AWSTemplateFormatVersion: "2010-09-09"
Description: "Keycloak stack"

Parameters:
  ProjectName:
    Type: String
    Description: Name of the project

  EnvironmentName:
    Type: String
    Description: An environment name that will be prefixed to resource names
  
  StackName:
    Type: String
    Description: An environment name that will be prefixed to resource names
  
  VpcId:
    Type: String
    Description: VPC ID
  
  VpcCIDR:
    Type: String
    Description: VPC CIDR
  
  PublicSubnet1Id:
    Type: String
    Description: Public subnet 1 ID
  
  PrivateSubnet1Id:
    Type: String
    Description: Private subnet 1 ID
  
  PrivateSubnet2Id:
    Type: String
    Description: Private subnet 2 ID
  
  BastionHostSecurityGroupId:
    Type: String
    Description: Security group ID of the bastion host
  
  MainS3BucketName:
    Type: String
    Description: S3 bucket name
  
  CacheS3BucketName:
    Type: String
    Description: S3 bucket name 
  
  KeycloakInstanceType:
    Type: String
    Description: EC2 instance type
  
  KeycloakInstanceRootVolumeSize:
    Type: Number
    Description: Root volume size for Keycloak instances

  KeycloakAsgName:
    Type: String
    Description: Name of the Keycloak ASG

  KeycloakAsgMinSize:
    Type: Number
    Description: Minimum number of instances in the Keycloak ASG
  
  KeycloakAsgMaxSize:
    Type: Number
    Description: Maximum number of instances in the Keycloak ASG
  
  KeycloakAsgDesiredCapacity:
    Type: Number
    Description: Desired number of instances in the Keycloak ASG
  
  KeycloakVersion:
    Type: String
    Description: Keycloak version

  KeycloakTopLevelDomain:
    Type: String
    Description: Keycloak top level domain
  
  KeycloakAlbSubDomainName:
    Type: String
    Description: Keycloak ALB domain name
  
  AuroraDBHost:
    Type: String
    Description: Keycloak Aurora DB host
  
  AuroraDBPort:
    Type: String
    Description: Keycloak Aurora DB port
  
  KeycloakAuroraDBUser:
    Type: String
    Description: Keycloak Aurora DB user
  
  KeycloakAuroraDBSchema:
    Type: String
    Description: Keycloak Aurora DB schema
  
  KeycloakAuroraDBDatabaseName:
    Type: String
    Description: Keycloak Aurora DB database name

  KeycloakAdminPasswordSecretId:
    Type: String
    Description: Keycloak admin password secret ID
  
  KubernetesKeySecretId:
    Type: String
    Description: Kubernetes key secret ID

Resources:

  KeycloakUserAuroraAccessPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "KeycloakUserAuroraAccessPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - rds-db:connect
            Resource:
              - !Sub "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:*/${KeycloakAuroraDBUser}"
      Roles:
        - !Ref KeycloakInstanceRole
      
  
  KeycloakS3ReadWritePrefixedS3BucketPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "S3ReadWritePolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "s3:GetObject"
              - "s3:PutObject"
              - "s3:DeleteObject"
              - "s3:ListBucket"
            Resource: "arn:aws:s3:::${CacheS3BucketName}/*"
          - Effect: "Allow"
            Action:
              - "s3:ListBucket"
              - "s3:GetObject"
            Resource: 
              - "arn:aws:s3:::${MainS3BucketName}/scripts/keycloak/*"
              - "arn:aws:s3:::${MainS3BucketName}/ssh/*"
      Roles:
        - !Ref KeycloakInstanceRole
  
  KeycloakCreateSecretsManagerPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "SecretsManagerPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "secretsmanager:CreateSecret"
              - "secretsmanager:GetSecretValue"
              - "secretsmanager:ListSecretVersionIds"
              - "secretsmanager:DescribeSecret"
            Resource:
              - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/keycloak/*"
      Roles:
        - !Ref KeycloakInstanceRole
  
  KeycloakEC2AccessPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "EC2AccessPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "ec2:DescribeInstances"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "autoscaling:SetDesiredCapacity"
            Resource: "arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${KeycloakAsgName}"
      Roles:
        - !Ref KeycloakInstanceRole
  
  KeycloakCloudFormationSignalPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "CloudFormationSignalPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "cloudformation:DescribeStackResource"
              - "cloudformation:SignalResource"
            Resource: "*"
      Roles:
        - !Ref KeycloakInstanceRole

  KeycloakInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: keycloak-instance-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  KeycloakTopLevelDomainPublicHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref KeycloakTopLevelDomain
      HostedZoneTags: 
        - Key: Name
          Value: !Ref KeycloakTopLevelDomain

  KeycloakSSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref KeycloakTopLevelDomain
      SubjectAlternativeNames:
        - !Ref KeycloakAlbSubDomainName
      DomainValidationOptions:
      - DomainName: !Ref KeycloakTopLevelDomain
        HostedZoneId: !Ref KeycloakTopLevelDomainPublicHostedZone
      ValidationMethod: DNS

  # 2. Route 53 Record
  KeycloakAlbRoute53Record:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Ref KeycloakTopLevelDomain
      Comment: CNAME record for Keycloak
      RecordSets:
      - Name: !Ref KeycloakAlbSubDomainName
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt 'KeycloakAlb.CanonicalHostedZoneID'
          DNSName: !GetAtt 'KeycloakAlb.DNSName'
  
  KeycloakAlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Keycloak ALB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          DestinationSecurityGroupId: !Ref KeycloakInstanceSecurityGroup

  # 3. ALB Load Balancer with Public and Private Subnets
  KeycloakAlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:    
      IpAddressType: ipv4
      Name: keycloak-alb
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref KeycloakAlbSecurityGroup
      Subnets:
        - !Ref PublicSubnet1Id
        - !Ref PrivateSubnet1Id
        - !Ref PrivateSubnet2Id
      Tags: 
        - Key: Name
          Value: keycloak-alb   

  KeycloakAlbTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 20
      HealthCheckPath: /health
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      IpAddressType: ipv4
      Matcher: 
        HttpCode: "200"
      Name: keycloak-alb-target-group
      Port: 8080
      Protocol: HTTP
      ProtocolVersion: HTTP1
      TargetGroupAttributes: 
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: app_cookie
        - Key: stickiness.app_cookie.cookie_name
          Value: AUTH_SESSION_ID
        - Key: stickiness.app_cookie.duration_seconds
          Value: 86400
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: keycloak-alb-target-group

  # Define an ALB listener with the target group
  KeycloakAlbListener:  
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref KeycloakAlb
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref KeycloakSSLCertificate
      SslPolicy: ELBSecurityPolicy-2016-08
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref KeycloakAlbTargetGroup
      
  # 5. Security Group for Keycloak Instances
  KeycloakInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Keycloak instances
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionHostSecurityGroupId
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref VpcCIDR
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref VpcCIDR
        - IpProtocol: tcp
          FromPort: 7800
          ToPort: 7800
          CidrIp: !Ref VpcCIDR
      SecurityGroupEgress:
        - IpProtocol: -1 
          CidrIp: 0.0.0.0/0
  
  KeycloakInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: keycloak-instance-profile
      Roles: 
        - !Ref KeycloakInstanceRole

  KeycloakPlacementGroup:
    Type: "AWS::EC2::PlacementGroup"
    Properties:
      Strategy: spread

  # 6. Define a Launch Template
  KeycloakLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName: "KeycloakLaunchTemplate"
      LaunchTemplateData:
        ImageId: ami-0261755bbcb8c4a84 # Ubuntu AWS 20.04 ami
        InstanceType: !Ref KeycloakInstanceType
        IamInstanceProfile:
          Arn: !GetAtt KeycloakInstanceProfile.Arn
        SecurityGroupIds:
          - !Ref KeycloakInstanceSecurityGroup
        BlockDeviceMappings:
          - DeviceName: "/dev/xvda"
            Ebs:
              VolumeSize: !Ref KeycloakInstanceRootVolumeSize
              VolumeType: "gp2"
        Monitoring:
          Enabled: true
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: keycloak
        UserData:
          Fn::Base64:
           Fn::Base64: !Sub |
            #!/bin/bash 

            exec > >(tee /var/log/user-data-stdout.log) 2> >(tee /var/log/user-data-stderr.log >&2)

            sudo apt update -y
            apt install -y jq
            apt install -y unzip

            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/opt/awscliv2.zip"
            unzip "/opt/awscliv2.zip" -d "/opt"
            sudo /opt/aws/install

            aws s3 cp s3://${MainS3BucketName}/ssh/client-key.pub /tmp/client-key.pub

            # Add the key to authorized_keys

            cat /tmp/client-key.pub >> /home/ubuntu/.ssh/authorized_keys

            function is_first_node() {
              local response=$(aws ec2 describe-instances \
                                --filters "Name=tag:Name,Values=keycloak" \
                                --query "Reservations[].Instances" | jq '. | length')
              if [ -z "$response" ]; then
                  echo "No instances found. An error occurred. Exiting."
                  exit 1
              elif [ "$response" -lt "1" ]; then
                  echo "No instances found. An error occurred. Exiting."
                  exit 1
              elif [ "$response" -eq "1" ]; then
                  echo "This is the first node."
                  return 0
              else
                  echo "This is not the first node."
                  return 1
              fi
            }

            ### TODO: Handle the case where all nodes are crashed and the ASG is trying to start a new node. ###

            if is_first_node; then
              echo "Starting first node."
              aws s3 cp s3://${MainS3BucketName}/scripts/keycloak/first-node.sh /tmp/first-node.sh
              chmod +x /tmp/first-node.sh
              sudo -u ubuntu bash -c "./tmp/first-node.sh \
                                        ${KeycloakVersion} \
                                        ${KeycloakAlbSubDomainName} \
                                        ${KeycloakAuroraDBSchema} \
                                        ${KeycloakAuroraDBDatabaseName} \
                                        ${AuroraDBHost} \
                                        ${AuroraDBPort} \
                                        ${KeycloakAuroraDBUser} \
                                        ${AWS::Region} \
                                        ${CacheS3BucketName} \
                                        ${KeycloakAsgName} \
                                        ${KeycloakAsgDesiredCapacity}" \
                                        ${KeycloakAdminPasswordSecretId} \
                                        ${KubernetesKeySecretId} \
                                        ${AWS::StackName} \
                                        KeycloakAutoScalingGroup
                                        
            else
              echo "Starting additional node."
              aws s3 cp s3://${MainS3BucketName}/scripts/keycloak/joining-node.sh /tmp/joining-node.sh
              chmod +x /tmp/joining-node.sh
              sudo -u ubuntu bash -c "./tmp/joining-node.sh \
                                        ${KeycloakVersion} \
                                        ${KeycloakAlbSubDomainName} \
                                        ${KeycloakAuroraDBSchema} \
                                        ${KeycloakAuroraDBDatabaseName} \
                                        ${AuroraDBHost} \
                                        ${AuroraDBPort} \
                                        ${KeycloakAuroraDBUser} \
                                        ${AWS::Region} \
                                        ${CacheS3BucketName}" \
                                        ${KeycloakAdminPasswordSecretId}

  # 7. Define the Auto Scaling Group
  KeycloakAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: !Ref KeycloakAsgName
      Cooldown: 300
      DefaultInstanceWarmup: 180
      DesiredCapacity: 1
      DesiredCapacityType: units
      HealthCheckGracePeriod: 300
      LaunchTemplate: !Ref KeycloakLaunchTemplate
      MaxSize: !Ref KeycloakAsgMaxSize
      MetricsCollection: 
        - Granularity: 1Minute
          Metrics: 
            - GroupInServiceInstances
            - GroupPendingInstances
            - GroupStandbyInstances
            - GroupTerminatingInstances
            - GroupTotalInstances
      MinSize: 1
      NewInstancesProtectedFromScaleIn: true
      PlacementGroup: !Ref KeycloakPlacementGroup
      TargetGroupARNs: 
        - !Ref KeycloakAlbTargetGroup
      VPCZoneIdentifier: 
        - !Ref PrivateSubnet1Id
        - !Ref PrivateSubnet2Id
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M

Outputs:
  KeycloakAlbDnsName:
    Description: "DNS Name of the Keycloak ALB"
    Value: !GetAtt 'KeycloakAlb.DNSName'

  KubernetesOidcProviderUrl:
    Description: "Keycloak Admin Console URL"
    Value: !Sub https://${KeycloakAlbSubDomainName}/realms/kubernetes

  KeycloakAdminUrl:
    Description: "Keycloak Application URL"
    Value: !Sub "https://${KeycloakAlbSubDomainName}/admin" # TODO: check this

  KeycloakInstanceSecurityGroupId:
    Description: "Security Group ID for Keycloak Instances"
    Value: !Ref KeycloakInstanceSecurityGroup
