Description: This template deploys a VPC, with one public and three private subnets spread
  across three Availability Zones. It deploys an internet gateway, with a default
  route on the public subnet. It deploys a NAT gateway and default routes for it in the private subnets.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: k8s-self-managed
  
  HomeInternetRouterIp: 
    Description: Home Internet Router IP Address 
    Type: String
    Default: 79.31.220.40/32
  
  AvailabilityZones:
    Description: List of Availability Zones to use (comma-delimited)
    Type: String
    Default: "us-east-1a,us-east-1b,us-east-1c"

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.0.0/20

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.16.0/20

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.32.0/20
  
  PrivateSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the third Availability Zone
    Type: String
    Default: 10.192.48.0/20
  
  S3BucketName:
    Description: Please enter the name for the S3BucketName
    Type: String
    Default: my-k8s-cluster-bucket

  BastionHostKeyPairName:
    Description: Please enter the name for the key pairs used for bootstrapping bastion host instance's ssh server
    Type: String
    Default: bastionHostKeys
  
  BastionHostInstanceType:
    Description: Please enter Bastion Host Instance Type
    Type: String
    Default: t2.micro
  
  K8sClusterName:
    Description: Please enter the name for the K8sClusterName
    Type: String
    Default: my-k8s

  K8sNodesHostnameMode:
    Description: Please enter the name for the K8sNodesHostnameMode
    Type: String
    Default: instance-id
  
  ControlPlaneAutoScalingGroupName:
    Description: Please enter the name for the ControlPlaneAsgName
    Type: String
    Default: controlplane-asg
  
  ControlPlaneAutoScalingGroupDesiredCapacity:
    Description: Please enter the desired capacity for the ControlPlaneAsgName
    Type: Number
    Default: 3

  ControlPlaneAutoScalingGroupMaxSize:
    Description: Please enter the max size for the ControlPlaneAsgName
    Type: Number
    Default: 3
  
  ControlPlaneInstanceType:
    Description: Please enter the instance type for the ControlPlaneAsgName
    Type: String
    Default: t3.medium
  
  ControlPlaneRootVolumeSize:
    Description: Please enter the root volume size for the ControlPlaneAsgName
    Type: Number
    Default: 16

  WorkerInstanceType:
    Description: Please enter the instance type for the WorkerAsgName
    Type: String
    Default: t3.large
  
  WorkerRootVolumeSize:
    Description: Please enter the root volume size for the WorkerAsgName
    Type: Number
    Default: 16
  
  WorkerSubnet1AutoScalingGroupMaxSize:
    Description: Please enter the max size for the WorkerSubnet1AutoScalingGroup
    Type: Number
    Default: 3
  
  WorkerSubnet2AutoScalingGroupMaxSize:
    Description: Please enter the max size for the WorkerSubnet2AutoScalingGroup
    Type: Number
    Default: 3
  
  WorkerSubnet3AutoScalingGroupMaxSize:
    Description: Please enter the max size for the WorkerSubnet3AutoScalingGroup
    Type: Number
    Default: 3

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !Split [ ",", !Ref AvailabilityZones ]]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
        - Key: kubernetes.io/role/elb
          Value: 1
        - Key: kubernetes.io/cluster/${K8sClusterName}
          Value: owned

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !Split [ ",", !Ref AvailabilityZones ]]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)
        - Key: kubernetes.io/role/internal-elb
          Value: 1
        - Key: kubernetes.io/cluster/${K8sClusterName}
          Value: owned

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !Split [ ",", !Ref AvailabilityZones ]]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)
        - Key: kubernetes.io/role/internal-elb
          Value: 1
        - Key: kubernetes.io/cluster/${K8sClusterName}
          Value: owned
  
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !Split [ ",", !Ref AvailabilityZones ]]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ3)
        - Key: kubernetes.io/role/internal-elb
          Value: 1
        - Key: kubernetes.io/cluster/${K8sClusterName}
          Value: owned

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Nat Gateway 1 EIP

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Nat Gateway 1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)
  
  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
  
  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ3)

  DefaultPrivateRoute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref PrivateSubnet3
  
  BastionHostKeyPair:
   Type: 'AWS::EC2::KeyPair'
   Properties:
     KeyName: bastionHostKeys
  
  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: BastionHostSecurityGroup
      Description: Security group for the bastion host
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref HomeInternetRouterIp
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !GetAtt VPC.CidrBlock

  BastionHostInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref BastionHostInstanceType
      ImageId: ami-0a887e401f7654935  
      KeyName: !Ref BastionHostKeyPairName
      SubnetId: !Ref PublicSubnet1
      SecurityGroups:
        - !Ref BastionHostSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion Host Instance
  
  AwsEbsCsiDriverPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyName: AwsEbsCsiDriverPolicy
      Description: Policy for the AWS EBS CSI Driver
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ec2:CreateSnapshot
              - ec2:AttachVolume
              - ec2:DetachVolume
              - ec2:ModifyVolume
              - ec2:DescribeAvailabilityZones
              - ec2:DescribeInstances
              - ec2:DescribeSnapshots
              - ec2:DescribeTags
              - ec2:DescribeVolumes
              - ec2:DescribeVolumesModifications
            Resource: "*"
          - Effect: Allow
            Action:
              - ec2:CreateTags
            Resource:
              - "arn:aws:ec2:*:*:volume/*"
              - "arn:aws:ec2:*:*:snapshot/*"
            Condition:
              StringEquals:
                "ec2:CreateAction":
                  - "CreateVolume"
                  - "CreateSnapshot"
          - Effect: Allow
            Action:
              - ec2:DeleteTags
            Resource:
              - "arn:aws:ec2:*:*:volume/*"
              - "arn:aws:ec2:*:*:snapshot/*"
          - Effect: Allow
            Action:
              - ec2:CreateVolume
            Resource: "*"
            Condition:
              StringLike:
                "aws:RequestTag/ebs.csi.aws.com/cluster": "true"
          - Effect: Allow
            Action:
              - ec2:CreateVolume
            Resource: "*"
            Condition:
              StringLike:
                "aws:RequestTag/CSIVolumeName": "*"
          - Effect: Allow
            Action:
              - ec2:DeleteVolume
            Resource: "*"
            Condition:
              StringLike:
                "ec2:ResourceTag/ebs.csi.aws.com/cluster": "true"
          - Effect: Allow
            Action:
              - ec2:DeleteVolume
            Resource: "*"
            Condition:
              StringLike:
                "ec2:ResourceTag/CSIVolumeName": "*"
          - Effect: Allow
            Action:
              - ec2:DeleteVolume
            Resource: "*"
            Condition:
              StringLike:
                "ec2:ResourceTag/kubernetes.io/created-for/pvc/name": "*"
          - Effect: Allow
            Action:
              - ec2:DeleteSnapshot
            Resource: "*"
            Condition:
              StringLike:
                "ec2:ResourceTag/CSIVolumeSnapshotName": "*"
          - Effect: Allow
            Action:
              - ec2:DeleteSnapshot
            Resource: "*"
            Condition:
              StringLike:
                "ec2:ResourceTag/ebs.csi.aws.com/cluster": "true"

  S3ReadOnlyAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyName: S3ReadOnlyAccessPolicy
      Description: Policy for the S3ReadOnlyAccess
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:Get*
              - s3:List*
              - s3:Describe*
            Resource:
              - Fn::Sub: arn:aws:s3:::${S3BucketName}
              - Fn::Sub: arn:aws:s3:::${S3BucketName}/*
  
  S3WriteOnlyAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3WriteOnlyAccessPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource: 
              - Fn::Sub: arn:aws:s3:::${S3BucketName}
              - Fn::Sub: arn:aws:s3:::${S3BucketName}/*
  
  ControlPlaneAwsCloudProviderPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyName: ControlPlaneAwsCloudProviderPolicy
      Description: Policy for the ControlPlaneAwsCloudProvider
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:DescribeLaunchConfigurations
              - autoscaling:DescribeTags
              - ec2:DescribeInstances
              - ec2:DescribeRegions
              - ec2:DescribeRouteTables
              - ec2:DescribeSecurityGroups
              - ec2:DescribeSubnets
              - ec2:DescribeVolumes
              - ec2:DescribeAvailabilityZones
              - ec2:CreateSecurityGroup
              - ec2:CreateTags
              - ec2:CreateVolume
              - ec2:ModifyInstanceAttribute
              - ec2:ModifyVolume
              - ec2:AttachVolume
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:CreateRoute
              - ec2:DeleteRoute
              - ec2:DeleteSecurityGroup
              - ec2:DeleteVolume
              - ec2:DetachVolume
              - ec2:RevokeSecurityGroupIngress
              - ec2:DescribeVpcs
              - elasticloadbalancing:AddTags
              - elasticloadbalancing:AttachLoadBalancerToSubnets
              - elasticloadbalancing:ApplySecurityGroupsToLoadBalancer
              - elasticloadbalancing:CreateLoadBalancer
              - elasticloadbalancing:CreateLoadBalancerPolicy
              - elasticloadbalancing:CreateLoadBalancerListeners
              - elasticloadbalancing:ConfigureHealthCheck
              - elasticloadbalancing:DeleteLoadBalancer
              - elasticloadbalancing:DeleteLoadBalancerListeners
              - elasticloadbalancing:DescribeLoadBalancers
              - elasticloadbalancing:DescribeLoadBalancerAttributes
              - elasticloadbalancing:DetachLoadBalancerFromSubnets
              - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
              - elasticloadbalancing:ModifyLoadBalancerAttributes
              - elasticloadbalancing:RegisterInstancesWithLoadBalancer
              - elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer
              - elasticloadbalancing:AddTags
              - elasticloadbalancing:CreateListener
              - elasticloadbalancing:CreateTargetGroup
              - elasticloadbalancing:DeleteListener
              - elasticloadbalancing:DeleteTargetGroup
              - elasticloadbalancing:DescribeListeners
              - elasticloadbalancing:DescribeLoadBalancerPolicies
              - elasticloadbalancing:DescribeTargetGroups
              - elasticloadbalancing:DescribeTargetHealth
              - elasticloadbalancing:ModifyListener
              - elasticloadbalancing:ModifyTargetGroup
              - elasticloadbalancing:RegisterTargets
              - elasticloadbalancing:DeregisterTargets
              - elasticloadbalancing:SetLoadBalancerPoliciesOfListener
              - iam:CreateServiceLinkedRole
              - kms:DescribeKey
            Resource:
              - "*"

  EcrPrivateRepositoryPullOnlyPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyName: EcrPrivateRepositoryPullOnlyPolicy
      Description: Policy for the EcrPrivateRepositoryPullOnly
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:GetRepositoryPolicy
              - ecr:DescribeRepositories
              - ecr:ListImages
              - ecr:BatchGetImage
            Resource: "*"

  AwsLoadBalancerControllerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyName: AwsLoadBalancerControllerPolicy
      Description: Policy for the AwsLoadBalancerController
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - iam:CreateServiceLinkedRole
            Resource: "*"
            Condition:
              StringEquals:
                iam:AWSServiceName: "elasticloadbalancing.amazonaws.com"
          - Effect: Allow
            Action:
              - ec2:DescribeAccountAttributes
              - ec2:DescribeAddresses
              - ec2:DescribeAvailabilityZones
              - ec2:DescribeInternetGateways
              - ec2:DescribeVpcs
              - ec2:DescribeVpcPeeringConnections
              - ec2:DescribeSubnets
              - ec2:DescribeSecurityGroups
              - ec2:DescribeInstances
              - ec2:DescribeNetworkInterfaces
              - ec2:DescribeTags
              - ec2:GetCoipPoolUsage
              - ec2:DescribeCoipPools
              - elasticloadbalancing:DescribeLoadBalancers
              - elasticloadbalancing:DescribeLoadBalancerAttributes
              - elasticloadbalancing:DescribeListeners
              - elasticloadbalancing:DescribeListenerCertificates
              - elasticloadbalancing:DescribeSSLPolicies
              - elasticloadbalancing:DescribeRules
              - elasticloadbalancing:DescribeTargetGroups
              - elasticloadbalancing:DescribeTargetGroupAttributes
              - elasticloadbalancing:DescribeTargetHealth
              - elasticloadbalancing:DescribeTags
            Resource: "*"
          - Effect: Allow
            Action:
              - cognito-idp:DescribeUserPoolClient
              - acm:ListCertificates
              - acm:DescribeCertificate
              - iam:ListServerCertificates
              - iam:GetServerCertificate
              - waf-regional:GetWebACL
              - waf-regional:GetWebACLForResource
              - waf-regional:AssociateWebACL
              - waf-regional:DisassociateWebACL
              - wafv2:GetWebACL
              - wafv2:GetWebACLForResource
              - wafv2:AssociateWebACL
              - wafv2:DisassociateWebACL
              - shield:GetSubscriptionState
              - shield:DescribeProtection
              - shield:CreateProtection
              - shield:DeleteProtection
            Resource: "*"
          - Effect: Allow
            Action:
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:RevokeSecurityGroupIngress
            Resource: "*"
          - Effect: Allow
            Action:
              - ec2:CreateSecurityGroup
            Resource: "*"
          - Effect: Allow
            Action:
              - ec2:CreateTags
            Resource: "arn:aws:ec2:*:*:security-group/*"
            Condition:
              StringEquals:
                ec2:CreateAction: "CreateSecurityGroup"
              Null:
                aws:RequestTag/elbv2.k8s.aws/cluster: "false"
          - Effect: Allow
            Action:
              - ec2:CreateTags
              - ec2:DeleteTags
            Resource: "arn:aws:ec2:*:*:security-group/*"
            Condition:
              Null:
                aws:RequestTag/elbv2.k8s.aws/cluster: "true"
                aws:ResourceTag/elbv2.k8s.aws/cluster: "false"
          - Effect: Allow
            Action:
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:RevokeSecurityGroupIngress
              - ec2:DeleteSecurityGroup
            Resource: "*"
            Condition:
              Null:
                aws:ResourceTag/elbv2.k8s.aws/cluster: "false"
          - Effect: Allow
            Action:
              - elasticloadbalancing:CreateLoadBalancer
              - elasticloadbalancing:CreateTargetGroup
            Resource: "*"
            Condition:
              Null:
                aws:RequestTag/elbv2.k8s.aws/cluster: "false"
          - Effect: Allow
            Action:
              - elasticloadbalancing:CreateListener
              - elasticloadbalancing:DeleteListener
              - elasticloadbalancing:CreateRule
              - elasticloadbalancing:DeleteRule
            Resource: "*"
          - Effect: Allow
            Action:
              - elasticloadbalancing:AddTags
              - elasticloadbalancing:RemoveTags
            Resource:
              - "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"
              - "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*"
              - "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"
            Condition:
              Null:
                aws:RequestTag/elbv2.k8s.aws/cluster: "true"
                aws:ResourceTag/elbv2.k8s.aws/cluster: "false"
          - Effect: Allow
            Action:
              - elasticloadbalancing:AddTags
              - elasticloadbalancing:RemoveTags
            Resource:
              - "arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*"
              - "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*"
              - "arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*"
              - "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*"
          - Effect: Allow
            Action:
              - elasticloadbalancing:ModifyLoadBalancerAttributes
              - elasticloadbalancing:SetIpAddressType
              - elasticloadbalancing:SetSecurityGroups
              - elasticloadbalancing:SetSubnets
              - elasticloadbalancing:DeleteLoadBalancer
              - elasticloadbalancing:ModifyTargetGroup
              - elasticloadbalancing:ModifyTargetGroupAttributes
              - elasticloadbalancing:DeleteTargetGroup
            Resource: "*"
            Condition:
              Null:
                aws:ResourceTag/elbv2.k8s.aws/cluster: "false"
          - Effect: Allow
            Action:
              - elasticloadbalancing:AddTags
            Resource:
              - "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"
              - "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*"
              - "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"
            Condition:
              StringEquals:
                elasticloadbalancing:CreateAction:
                  - "CreateTargetGroup"
                  - "CreateLoadBalancer"
              Null:
                aws:RequestTag/elbv2.k8s.aws/cluster: "false"
          - Effect: Allow
            Action:
              - elasticloadbalancing:RegisterTargets
              - elasticloadbalancing:DeregisterTargets
            Resource: "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"
          - Effect: Allow
            Action:
              - elasticloadbalancing:SetWebAcl
              - elasticloadbalancing:ModifyListener
              - elasticloadbalancing:AddListenerCertificates
              - elasticloadbalancing:RemoveListenerCertificates
              - elasticloadbalancing:ModifyRule
            Resource: "*"
  
  WorkerAwsCloudProviderPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: WorkerAwsCloudProviderPolicy
      Description: Policy for the WorkerAwsCloudProvider
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ec2:DescribeInstances
              - ec2:DescribeRegions
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:GetRepositoryPolicy
              - ecr:DescribeRepositories
              - ecr:ListImages
              - ecr:BatchGetImage
            Resource: "*"
  
  ClusterAutoScalingPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: YourAutoScalingPolicyName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:DescribeAutoScalingInstances
              - autoscaling:DescribeLaunchConfigurations
              - autoscaling:DescribeScalingActivities
              - autoscaling:DescribeTags
              - ec2:DescribeInstanceTypes
              - ec2:DescribeLaunchTemplateVersions
            Resource: '*'
          - Effect: Allow
            Action:
              - autoscaling:SetDesiredCapacity
              - autoscaling:TerminateInstanceInAutoScalingGroup
              - ec2:DescribeImages
              - ec2:GetInstanceTypesFromInstanceRequirements
              - eks:DescribeNodegroup
            Resource: '*'
  
  KubernetesClusterPutSSMParameterStoreAccessPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "ParameterStoreWritePolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "ssm:PutParameter"
            Resource:
              - Fn::Sub: "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/kubernetes/${K8sClusterName}/*"
    
  KubernetesClusterKMSKeyEncryptAccessPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "KMSKeyEncryptAccessPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "kms:Encrypt"
            Resource: 
              - !GetAtt KubernetesClusterSsmParametersKMSKey.Arn

  KubernetesClusterGetSSMParameterAccessPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "SSMParameterAccessPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "ssm:GetParameter"
            Resource:
              - Fn::Sub: "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/kubernetes/${K8sClusterName}/*"
  
  KubernetesClusterGetKMSKeyAccessPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "KMSKeyAccessPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "kms:DescribeKey"
              - "kms:GetKeyPolicy"
              - "kms:GetKeyRotationStatus"
            Resource:
              - !GetAtt KubernetesClusterSsmParametersKMSKey.Arn

  ControlPlaneInstanceIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ControlPlaneInstanceIAMRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref ControlPlaneAwsCloudProviderPolicy
        - !Ref AwsEbsCsiDriverPolicy
        - !Ref S3ReadOnlyAccessPolicy
        - !Ref S3WriteOnlyAccessPolicy
        - !Ref EcrPrivateRepositoryPullOnlyPolicy
        - !Ref AwsLoadBalancerControllerPolicy
        - !Ref ClusterAutoScalingPolicy
        - !Ref KubernetesClusterPutSSMParameterStoreAccessPolicy
        - !Ref KubernetesClusterKMSKeyEncryptAccessPolicy
      Tags:
        - Key: Name
          Value: ControlPlaneInstanceIAMRole
  
  WorkerInstanceIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: WorkerInstanceIAMRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref WorkerAwsCloudProviderPolicy
        - !Ref AwsEbsCsiDriverPolicy
        - !Ref S3ReadOnlyAccessPolicy
        - !Ref EcrPrivateRepositoryPullOnlyPolicy
        - !Ref AwsLoadBalancerControllerPolicy
        - !Ref ClusterAutoScalingPolicy
        - !Ref KubernetesClusterGetSSMParameterAccessPolicy
        - !Ref KubernetesClusterGetKMSKeyAccessPolicy
      Tags:
        - Key: Name
          Value: WorkerInstanceIAMRole
  
  KubernetesClusterSsmParametersKMSKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: "Kubernetes Cluster SSM Parameters KMS Key"
      Tags:
        - Key: Name
          Value: "Kubernetes Cluster SSM Parameters KMS Key"

  ControlPlaneNlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ControlPlaneNlbSecurityGroup
      Description: Security Group for ControlPlane NLB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6443
          ToPort: 6443
          CidrIp: !GetAtt VPC.CidrBlock
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 6443
          ToPort: 6443
          DestinationSecurityGroupId: !Ref ControlPlaneSecurityGroup

  ControlPlaneNlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: controlplane-nlb
      Scheme: internal
      IpAddressType: ipv4
      Subnets:
        - !Ref SubnetId1
        - !Ref SubnetId2
        - !Ref SubnetId3
      Type: network
      SecurityGroups:
        - !Ref ControlPlaneNlbSecurityGroup
      Tags:
        - Key: Name
          Value: controlplane-nlb

  ControlPlaneNlbApiServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: controlplane-nlb-target-group
      Port: 6443
      Protocol: TCP
      VpcId: !Ref VPCId
      HealthCheckEnabled: True
      HealthCheckIntervalSeconds: 10
      HealthCheckPort: 6443
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 240
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Name
          Value: controlplane-nlb-target-group

  ControlPlaneNlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ControlPlaneNlbApiServerTargetGroup
      LoadBalancerArn: !Ref ControlPlaneNlb
      Port: 6443
      Protocol: TCP # TLS passthrough 
      Tags:
        - Key: Name
          Value: controlplane-nlb-listener

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: controlplane-sg
      Description: Security Group for Zookeeper Instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22   # SSH Port
          ToPort: 22     # SSH Port
          SourceSecurityGroupId: !GetAtt BastionHostSecurityGroup.GroupId 
        - IpProtocol: tcp 
          FromPort: 179  # BGP port for calico 
          ToPort: 179    # ZooKeeper port
          CidrIp: !GetAtt VPC.CidrBlock
        - IpProtocol: udp
          FromPort: 179  # BGP port for calico
          ToPort: 179    # ZooKeeper port
          CidrIp: !GetAtt VPC.CidrBlock
        - IpProtocol: 4   # Cusotom protocol (IP in IP)  
          FromPort: -1  # All ports
          ToPort: -1    # All ports
          CidrIp: !Ref PodsOverlayNetworkCidr # Pods overlay network CIDR
        - IpProtocol: tcp
          FromPort: 10248  # Kubelet port 
          ToPort: 10250    # Kubelet port
          CidrIp: !GetAtt VPC.CidrBlock # VPC CIDR
        - IpProtocol: tcp
          FromPort: 2379  # etcd port 
          ToPort: 2380    # etcd port
          CidrIp: !GetAtt VPC.CidrBlock # VPC CIDR
        - IpProtocol: tcp
          FromPort: 6443  # Kubelet port 
          ToPort: 6443    # Kubelet port
          CidrIp: 0.0.0.0/0 # All IPs
        - IpProtocol: tcp
          FromPort: 443  # HTTPS port 
          ToPort: 443    # HTTPS port
          CidrIp: 0.0.0.0/0 # All IPs
        - IpProtocol: icmp
          FromPort: 8  # All ports
          ToPort: -1    # All ports
          CidrIp: GetAtt VPC.CidrBlock # VPC CIDR
        - IpProtocol: tcp
          FromPort: 5473  # All ports
          ToPort: 5473    # All ports
          CidrIp: GetAtt VPC.CidrBlock # VPC CIDR
        - IpProtocol: udp
          FromPort: 5473  # All ports
          ToPort: 5473    # All ports
          CidrIp: GetAtt VPC.CidrBlock # VPC CIDR
      SecurityGroupEgress:
        - IpProtocol: -1     # All protocols
          CidrIp: 0.0.0.0/0  # All destination IPs
      Tags:
        - Key: Name
          Value: ControlPlaneSecurityGroup

  ControlPlaneKeyPair:
   Type: 'AWS::EC2::KeyPair'
   Properties:
     KeyName: ControlPlaneKeyPair
     Tags:
       - Key: Name
         Value: ControlPlaneKeyPair

  ControlPlanePlacementGroup:
    Type: AWS::EC2::PlacementGroup
    Properties:
      Strategy: spread
    Tags:
      - Key: Name
        Value: ControlPlanePlacementGroup
  
  ControlPlaneLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: ControlPlaneLaunchTemplate
      LaunchTemplateData:
        ImageId: ami-0261755bbcb8c4a84 # Ubuntu AWS 20.04 ami
        InstanceType: !Ref ControlPlaneInstanceType
        IamInstanceProfile:
          Name: !Ref ControlPlaneInstanceIAMRole
        KeyName: !GetAtt ControlPlaneKeyPair.KeyName
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup  # Reference security group(s) by ID
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: !Ref ControlPlaneRootVolumeSize # TODO: TO ADD TO PARAMETERS
              VolumeType: gp2
              DeleteOnTermination: true
        Monitoring:
          Enabled: true
        Tags:
          - Key: Name
            Value: ControlPlaneLaunchTemplate
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo apt update -y && sudo apt upgrade -y
            sudo apt install -y unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            sudo apt install -y jq

            function is_first_controlplane() {
            if [ "$(aws ec2 describe-instances \
                          --query 'Reservations[].Instances[] | [?Tags[?Key==`Name` && Value==`ControlPlane`]]' \
                          --output json | jq length)" -eq 1 ]; then
              return 0;
            fi
            return 1;
            }

            if $is_first_controlplane; then
              aws s3 cp s3://${S3BucketName}/scripts/controlplane/first-controlplane.sh /tmp/controlplane.sh
              chmod +x /tmp/controlplane.sh
              bash /tmp/controlplane.sh \
                ${K8sClusterName} \
                ${KubernetesVersion} \
                ${PodNetworkCidr} \
                ${ClusterServicesNetworkCidr} \
                ${ClusterDefaultDns} \
                ${K8sNodesHostnameMode} \
                ${ControlPlaneAutoScalingGroupName} \
                ${ControlPlaneAutoScalingGroupDesiredCapacity} \
                ${S3BucketName}
            else
              aws s3 cp s3://${S3BucketName}/scripts/controlplane/joining-controlplane.sh /tmp/controlplane.sh
              chmod +x /tmp/controlplane.sh
              bash /tmp/controlplane.sh \
                ${K8sClusterName} \
                ${KubernetesVersion} \
                ${K8sNodesHostnameMode} 
            fi

  ControlPlaneAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Ref ControlPlaneAutoScalingGroupName 
      LaunchTemplate:
        LaunchTemplateName: !Ref ControlPlaneLaunchTemplate
        Version: !GetAtt ControlPlaneLaunchTemplate.LatestVersionNumber
      TargetGroupARNs:
        - !Ref ControlPlaneNlbApiServerTargetGroup
      MinSize: 1
      MaxSize: !Ref ControlPlaneAutoScalingGroupMaxSize 
      DesiredCapacity: 1
      PlacementGroup: !Ref ControlPlanePlacementGroup
      HealthCheckGracePeriod: 300
      Cooldown: 300
      TerminationPolicies:
        - OldestInstance 
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      DependsOn:
        - ControlPlaneNlbListener
      Tags:
        - Key: Name
          Value: ControlPlane
          PropagateAtLaunch: true
        - Key: kubernetes.io/cluster/${K8sClusterName}
          Value: owned
          PropagateAtLaunch: true
        - Key: k8s.io/cluster-autoscaler/enabled
          Value: "true"
          PropagateAtLaunch: false
        - Key: k8s.io/cluster-autoscaler/${K8sClusterName}
          Value: "true"
          PropagateAtLaunch: false

  WorkersSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: worker-sg
      Description: Security Group for Worker Node Instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22   # SSH Port
          ToPort: 22     # SSH Port
          SourceSecurityGroupId: !GetAtt BastionHostSecurityGroup.GroupId 
        - IpProtocol: tcp 
          FromPort: 179  # BGP port for calico 
          ToPort: 179    # ZooKeeper port
          CidrIp: !GetAtt VPC.CidrBlock
        - IpProtocol: udp
          FromPort: 179  # BGP port for calico
          ToPort: 179    # ZooKeeper port
          CidrIp: !GetAtt VPC.CidrBlock
        - IpProtocol: 4   # Cusotom protocol (IP in IP)  
          FromPort: -1  # All ports
          ToPort: -1    # All ports
          CidrIp: !Ref PodsOverlayNetworkCidr # Pods overlay network CIDR
        - IpProtocol: tcp
          FromPort: 10250  # Kubelet port 
          ToPort: 10250    # Kubelet port
          CidrIp: !GetAtt VPC.CidrBlock # VPC CIDR
        - IpProtocol: tcp
          FromPort: 2379  # etcd port 
          ToPort: 2380    # etcd port
          CidrIp: !GetAtt VPC.CidrBlock # VPC CIDR
        - IpProtocol: tcp
          FromPort: 443  # HTTPS port 
          ToPort: 443    # HTTPS port
          CidrIp: 0.0.0.0/0 # All IPs
        - IpProtocol: tcp
          FromPort: 4443  # metrics-server port 
          ToPort: 4443    # metrics-server port
          CidrIp: !GetAtt VPC.CidrBlock # VPC CIDR
        - IpProtocol: icmp
          FromPort: 8  # All ports
          ToPort: -1    # All ports
          CidrIp: GetAtt VPC.CidrBlock # VPC CIDR
        - IpProtocol: tcp
          FromPort: 5473  # All ports
          ToPort: 5473    # All ports
          CidrIp: GetAtt VPC.CidrBlock # VPC CIDR
        - IpProtocol: udp
          FromPort: 5473  # All ports
          ToPort: 5473    # All ports
          CidrIp: GetAtt VPC.CidrBlock # VPC CIDR
        - IpProtocol: tcp
          FromPort: 14269  # @TODO: find out what is this port for 
          ToPort: 14269    # @TODO: find out what is this port for
          CidrIp: 0.0.0.0/0 # All IPs
        - IpProtocol: tcp
          FromPort: 30000  # NodePort range start
          ToPort: 32767    # NodePort range end
          CidrIp: 0.0.0.0/0 # All IPs
      SecurityGroupEgress:
        - IpProtocol: -1     # All protocols
          CidrIp: 0.0.0.0/0  # All destination IPs
      Tags:
        - Key: Name
          Value: WorkersSecurityGroup
  
  WorkerKeyPair:
   Type: 'AWS::EC2::KeyPair'
   Properties:
     KeyName: WorkerKeyPair
      Tags:
        - Key: Name
          Value: WorkerKeyPair

  WorkerPlacementGroup:
    Type: AWS::EC2::PlacementGroup
    Properties:
      Strategy: cluster
    Tags:
      - Key: Name
        Value: WorkerPlacementGroup
  
  WorkerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: WorkerLaunchTemplate
      LaunchTemplateData:
        ImageId: ami-0261755bbcb8c4a84 # Ubuntu AWS 20.04 ami
        InstanceType: !Ref WorkerInstanceType
        IamInstanceProfile:
          Name: !Ref WorkerInstanceIAMRole
        KeyName: !GetAtt WorkerKeyPair.KeyName
        SecurityGroupIds:
          - !Ref WorkerSecurityGroup  # Reference security group(s) by ID
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: !Ref WorkerRootVolumeSize
              VolumeType: gp2 # Choose an appropriate volume type (e.g., gp2, io1)
              DeleteOnTermination: true
        Monitoring:
          Enabled: true
        Tags:
          - Key: Name
            Value: WorkerLaunchTemplate
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo apt update -y && sudo apt upgrade -y
            sudo apt install -y unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

            aws s3 cp s3://${S3BucketName}/scripts/worker/worker.sh /tmp/worker.sh
            chmod +x /tmp/worker.sh
            bash /tmp/worker.sh \
              ${K8sClusterName} \
              ${K8sNodesHostnameMode} \
              ${KubernetesVersion} 

  WorkerSubnet1AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: worker-nodes-subnet1-asg
      LaunchTemplate:
        LaunchTemplateName: !Ref WorkerLaunchTemplate
        Version: !GetAtt WorkerLaunchTemplate.LatestVersionNumber
      MinSize: 0
      MaxSize: !Ref WorkerSubnet1AutoScalingGroupMaxSize
      DesiredCapacity: 0
      PlacementGroup: !Ref WorkerPlacementGroup
      HealthCheckGracePeriod: 300
      Cooldown: 300
      TerminationPolicies:
        - OldestInstance 
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
      DependsOn:
        - ControlPlaneAutoScalingGroup
      Tags:
        - Key: k8s.io/cluster-autoscaler/${K8sClusterName}
          Value: owned
          PropagateAtLaunch: false
        - Key: k8s.io/cluster-autoscaler/enabled
          Value: "true"
          PropagateAtLaunch: false
        - Key: Name
          Value: AutoScalingGroupWorkerSubnet1
          PropagateAtLaunch: true
        - Key: kubernetes.io/cluster/${K8sClusterName}
          Value: owned
          PropagateAtLaunch: true
        - Key: kubernetes.io/role/node
          Value: "true"
          PropagateAtLaunch: true
  
  WorkerSubnet2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: worker-nodes-subnet2-asg
      LaunchTemplate:
        LaunchTemplateName: !Ref WorkerLaunchTemplate
        Version: !GetAtt WorkerLaunchTemplate.LatestVersionNumber
      MinSize: 0
      MaxSize: !Ref WorkerSubnet2AutoScalingGroupMaxSize
      DesiredCapacity: 0
      PlacementGroup: !Ref WorkerPlacementGroup
      HealthCheckGracePeriod: 300
      Cooldown: 300
      TerminationPolicies:
        - OldestInstance 
      VPCZoneIdentifier:
        - !Ref PrivateSubnet2
      DependsOn:
        - ControlPlaneAutoScalingGroup
      Tags:
        - Key: k8s.io/cluster-autoscaler/${K8sClusterName}
          Value: owned
          PropagateAtLaunch: false
        - Key: k8s.io/cluster-autoscaler/enabled
          Value: "true"
          PropagateAtLaunch: false
        - Key: Name
          Value: AutoScalingGroupWorkerSubnet2
          PropagateAtLaunch: true
        - Key: kubernetes.io/cluster/${K8sClusterName}
          Value: owned
          PropagateAtLaunch: true
        - Key: kubernetes.io/role/node
          Value: "true"
          PropagateAtLaunch: true
  
  WorkerSubnet3AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: worker-nodes-subnet3-asg
      LaunchTemplate:
        LaunchTemplateName: !Ref WorkerLaunchTemplate
        Version: !GetAtt WorkerLaunchTemplate.LatestVersionNumber
      MinSize: 0
      MaxSize: !Ref WorkerSubnet3AutoScalingGroupMaxSize
      DesiredCapacity: 0
      PlacementGroup: !Ref WorkerPlacementGroup
      HealthCheckGracePeriod: 300
      Cooldown: 300
      TerminationPolicies:
        - OldestInstance 
      VPCZoneIdentifier:
        - !Ref PrivateSubnet3
      DependsOn:
        - ControlPlaneAutoScalingGroup
      Tags:
        - Key: k8s.io/cluster-autoscaler/${K8sClusterName}
          Value: owned
          PropagateAtLaunch: false
        - Key: k8s.io/cluster-autoscaler/enabled
          Value: "true"
          PropagateAtLaunch: false
        - Key: Name
          Value: AutoScalingGroupWorkerSubnet3
          PropagateAtLaunch: true
        - Key: kubernetes.io/cluster/${K8sClusterName}
          Value: owned
          PropagateAtLaunch: true
        - Key: kubernetes.io/role/node
          Value: "true"
          PropagateAtLaunch: true

Outputs:
  VPC:
    Description: The ID of the created VPC
    Value: !Ref VPC

  InternetGateway:
    Description: The ID of the created Internet Gateway
    Value: !Ref InternetGateway

  PublicSubnet1:
    Description: The ID of the created Public Subnet 1
    Value: !Ref PublicSubnet1

  PrivateSubnet1:
    Description: The ID of the created Private Subnet 1
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: The ID of the created Private Subnet 2
    Value: !Ref PrivateSubnet2

  PrivateSubnet3:
    Description: The ID of the created Private Subnet 3
    Value: !Ref PrivateSubnet3

  NatGateway1EIP:
    Description: The Elastic IP Allocation ID for Nat Gateway 1
    Value: !GetAtt NatGateway1EIP.AllocationId

  NatGateway1:
    Description: The ID of Nat Gateway 1
    Value: !Ref NatGateway1

  PublicRouteTable:
    Description: The ID of the created Public Route Table
    Value: !Ref PublicRouteTable

  DefaultPublicRoute:
    Description: The ID of the default Public Route
    Value: !Ref DefaultPublicRoute

  PrivateRouteTable1:
    Description: The ID of the created Private Route Table 1
    Value: !Ref PrivateRouteTable1

  DefaultPrivateRoute1:
    Description: The ID of the default Private Route 1
    Value: !Ref DefaultPrivateRoute1

  PrivateRouteTable2:
    Description: The ID of the created Private Route Table 2
    Value: !Ref PrivateRouteTable2

  DefaultPrivateRoute2:
    Description: The ID of the default Private Route 2
    Value: !Ref DefaultPrivateRoute2

  PrivateRouteTable3:
    Description: The ID of the created Private Route Table 3
    Value: !Ref PrivateRouteTable3

  DefaultPrivateRoute3:
    Description: The ID of the default Private Route 3
    Value: !Ref DefaultPrivateRoute3

  BastionHostKeyPair:
    Description: The key pair name for the Bastion Host
    Value: !Ref BastionHostKeyPairName

  BastionHostSecurityGroup:
    Description: The ID of the security group for the Bastion Host
    Value: !GetAtt BastionHostSecurityGroup.GroupId

  BastionHostInstance:
    Description: The ID of the Bastion Host EC2 instance
    Value: !Ref BastionHostInstance
  
  AwsEbsCsiDriverPolicy:
    Description: IAM Managed Policy for the AWS EBS CSI Driver
    Value: !Ref AwsEbsCsiDriverPolicy

  S3ReadOnlyAccessPolicy:
    Description: IAM Managed Policy for S3 Read-Only Access
    Value: !Ref S3ReadOnlyAccessPolicy

  S3WriteOnlyAccessPolicy:
    Description: IAM Managed Policy for S3 Write-Only Access
    Value: !Ref S3WriteOnlyAccessPolicy

  ControlPlaneAwsCloudProviderPolicy:
    Description: IAM Managed Policy for the Control Plane AWS Cloud Provider
    Value: !Ref ControlPlaneAwsCloudProviderPolicy

  EcrPrivateRepositoryPullOnlyPolicy:
    Description: IAM Managed Policy for ECR Private Repository Pull-Only Access
    Value: !Ref EcrPrivateRepositoryPullOnlyPolicy

  AwsLoadBalancerControllerPolicy:
    Description: IAM Managed Policy for the AWS Load Balancer Controller
    Value: !Ref AwsLoadBalancerControllerPolicy

  WorkerAwsCloudProviderPolicy:
    Description: IAM Managed Policy for the Worker AWS Cloud Provider
    Value: !Ref WorkerAwsCloudProviderPolicy

  ClusterAutoScalingPolicy:
    Description: IAM Managed Policy for Cluster Auto Scaling
    Value: !Ref ClusterAutoScalingPolicy

  KubernetesClusterPutSSMParameterStoreAccessPolicy:
    Description: IAM Policy for Putting Parameters in SSM Parameter Store
    Value: !Ref KubernetesClusterPutSSMParameterStoreAccessPolicy

  KubernetesClusterKMSKeyEncryptAccessPolicy:
    Description: IAM Policy for KMS Key Encrypt Access
    Value: !Ref KubernetesClusterKMSKeyEncryptAccessPolicy

  KubernetesClusterGetSSMParameterAccessPolicy:
    Description: IAM Policy for Getting Parameters from SSM Parameter Store
    Value: !Ref KubernetesClusterGetSSMParameterAccessPolicy

  KubernetesClusterGetKMSKeyAccessPolicy:
    Description: IAM Policy for Getting KMS Key Access
    Value: !Ref KubernetesClusterGetKMSKeyAccessPolicy

  ControlPlaneInstanceIAMRole:
    Description: IAM Role for Control Plane Instances
    Value: !Ref ControlPlaneInstanceIAMRole

  WorkerInstanceIAMRole:
    Description: IAM Role for Worker Instances
    Value: !Ref WorkerInstanceIAMRole

  KubernetesClusterSsmParametersKMSKey:
    Description: KMS Key for Kubernetes Cluster SSM Parameters
    Value: !GetAtt KubernetesClusterSsmParametersKMSKey.Arn

  ControlPlaneNlbSecurityGroup:
    Description: Security Group for ControlPlane NLB
    Value: !Ref ControlPlaneNlbSecurityGroup

  ControlPlaneNlb:
    Description: ControlPlane Network Load Balancer
    Value: !Ref ControlPlaneNlb

  ControlPlaneNlbApiServerTargetGroup:
    Description: Target Group for ControlPlane NLB
    Value: !Ref ControlPlaneNlbApiServerTargetGroup

  ControlPlaneNlbListener:
    Description: Listener for ControlPlane NLB
    Value: !Ref ControlPlaneNlbListener

  ControlPlaneSecurityGroup:
    Description: Security Group for ControlPlane
    Value: !Ref ControlPlaneSecurityGroup

  ControlPlaneKeyPair:
    Description: Key Pair for ControlPlane
    Value: !GetAtt ControlPlaneKeyPair.KeyName

  ControlPlanePlacementGroup:
    Description: Placement Group for ControlPlane
    Value: !Ref ControlPlanePlacementGroup

  ControlPlaneLaunchTemplate:
    Description: Launch Template for ControlPlane
    Value: !Ref ControlPlaneLaunchTemplate

  ControlPlaneAutoScalingGroup:
    Description: Auto Scaling Group for ControlPlane
    Value: !Ref ControlPlaneAutoScalingGroup

  WorkersSecurityGroup:
    Description: Security Group for Worker Nodes
    Value: !Ref WorkersSecurityGroup

  WorkerKeyPair:
    Description: Key Pair for Worker Nodes
    Value: !GetAtt WorkerKeyPair.KeyName

  WorkerPlacementGroup:
    Description: Placement Group for Worker Nodes
    Value: !Ref WorkerPlacementGroup

  WorkerLaunchTemplate:
    Description: Launch Template for Worker Nodes
    Value: !Ref WorkerLaunchTemplate

  WorkerSubnet1AutoScalingGroup:
    Description: Auto Scaling Group for Worker Nodes in Subnet 1
    Value: !Ref WorkerSubnet1AutoScalingGroup

  WorkerSubnet2AutoScalingGroup:
    Description: Auto Scaling Group for Worker Nodes in Subnet 2
    Value: !Ref WorkerSubnet2AutoScalingGroup

  WorkerSubnet3AutoScalingGroup:
    Description: Auto Scaling Group for Worker Nodes in Subnet 3
    Value: !Ref WorkerSubnet3AutoScalingGroup
